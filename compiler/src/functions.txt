//1
void print_string(const char* str) {
    printf("%s", str);
}

//2
char input_char() {
    char character;
    scanf(" %c", &character);
    return character;
}

//3
double input_double() {
    double number;
    scanf("%lf", &number);
    return number;
}

//4
float input_float() {
    float number;
    scanf("%f", &number);
    return number;
}

//5
int input_int() { 
    int number;
    scanf("%d", &number);
    return number;
}

//6
int remainder(int a,int b)
{
    int c=a%b;
    return c;
}

//7
bool isDivisible(int number, int divisor) {
    if (divisor == 0) {
        return false;  
    }

    return number % divisor == 0;
}


//8
bool not_divisible(int number, int divisor) {
    if (divisor == 0) {
        return false;  
    }

    return number % divisor != 0;
}

//9
double power(double base, int exponent) {
    if (exponent < 0) {
        return 1.0 / (base * power(base, -exponent - 1));
    } else if (exponent == 0) {
        return 1;
    } else {
        return base * power(base, exponent - 1);
    }
}

//10
void toUppercase(char *str) {
    int length = strlen(str);

    for (int i = 0; i < length; i++) {
        str[i] = toupper(str[i]);
    }
}

//11
void toLowercase(char *str) {
    int length = strlen(str);

    for (int i = 0; i < length; i++) {
        str[i] = tolower(str[i]);
    }
}

//12
int getRandomNumber(int min, int max) {
    return min + rand() % (max - min + 1);
}

//13
bool is_even(int number) {
    return number % 2 == 0;
}

//14
bool is_odd(int number) {
    return number % 2 != 0;
}

//15
int find_max(int array[], int size) {
    if (size <= 0) {
        return -1;
    }

    int max = array[0];  
    for (int i = 1; i < size; i++) {
        if (array[i] > max) {
            max = array[i];  
        }
    }

    return max;
}

//16
int find_min(int array[], int size) {
    if (size <= 0) {
        return -1;
    }

    int min = array[0]; 

    for (int i = 1; i < size; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }

    return min;
}

//17
void print_array(int array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d", array[i]);

        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("\n"); 
}

//18
unsigned long long factorial(int n) {
    if (n < 0) {
        return 0;
    }

    unsigned long long result = 1;  

    for (int i = 1; i <= n; i++) {
        result *= i;  
    }

    return result;
}

//19
void sort_array(int array[], int size) {
    int temp;

    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - 1 - i; j++) {
            if (array[j] > array[j + 1]) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}


//20
double calculate_bmi(double weight, double height) {
    if (weight <= 0 || height <= 0) {
        return -1;
    }

    return weight / (height * height);
}


//21
double calculate_distance(double x1, double y1, double x2, double y2) {
    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}


//22
void get_date() {
    time_t t;
    struct tm* now;
    char date[80];

    time(&t);
    now = localtime(&t);

    strftime(date, sizeof(date), "%Y-%m-%d", now);
    printf("Current Date: %s\n", date);
}


//23
int hcf(int num1, int num2) {
    if (num2 == 0) {
        return num1;
    } else {
        return hcf(num2, num1 % num2);
    }
}


//24
int lcm(int num1, int num2) {
    int gcd = 1; 
    int a = num1;
    int b = num2;
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    
    gcd = a; 
    int result = (num1 * num2) / gcd;
    
    return result;
}



//25
int calculate_age(int birth_year, int birth_month, int birth_day) {
    time_t current_time;
    struct tm* current_tm;
    time(&current_time);
    current_tm = localtime(&current_time);

    int current_year = current_tm->tm_year + 1900; 
    int current_month = current_tm->tm_mon + 1;    
    int current_day = current_tm->tm_mday;

    int age = current_year - birth_year;

    if (current_month < birth_month || (current_month == birth_month && current_day < birth_day)) {
        age--; 
    }

    return age;
}



//26
int count_character(const char *str, char target) {
    int count = 0;
    
    while (*str) {
        if (*str == target) {
            count++;
        }
        str++;
    }
    
    return count;
}


//27
int count_words(const char *str) {
    int count = 0;
    bool inWord = false;

    while (*str) {
        if (*str != ' ' && *str != '\t' && *str != '\n') {
            if (!inWord) {
                count++;
                inWord = true;
            }
        } else {
            inWord = false;
        }
        str++;
    }

    return count;
}



//28
char* generate_random_string(int length) {
    static const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    char *random_string = (char*)malloc(length + 1);

    for (int i = 0; i < length; i++) {
        int index = rand() % (sizeof(charset) - 1);
        random_string[i] = charset[index];
    }

    random_string[length] = '\0';
    return random_string;
}


//29
int generate_random_between(int min, int max) {
    return (rand() % (max - min + 1)) + min;
}

//30
void delete_element(int arr[], int size, int index) {
    if (index < 0 || index >= size) {
        printf("Invalid index for deletion\n");
        return;
    }

    for (int i = index; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    (*size)--; 

}


//31
void insert_element(int arr[], int size, int index, int value) {
    if (index < 0 || index > *size) {
        printf("Invalid index for insertion\n");
        return;
    }
   
    for (int i = size; i > index; i--) {
        arr[i] = arr[i - 1];
    }

    arr[index] = value;

    (*size)++; 
}

//32
bool is_sorted(int arr[], int size) {
    if (size <= 1) {
        return true; 
    }

    bool ascending = (arr[0] <= arr[1]); 
    for (int i = 1; i < size - 1; i++) {
        if ((arr[i] <= arr[i + 1]) != ascending) {
            return false; 
        }
    }

    return true; 
}

//33
void trim_string(char *str) {
    int start = 0;
    int end = strlen(str) - 1;

    while (isspace(str[start])) {
        start++;
    }

    while (end > start && isspace(str[end])) {
        end--;
    }

    int shift = 0;
    for (int i = start; i <= end; i++) {
        str[shift++] = str[i];
    }

    str[shift] = '\0';
}


//34
int compare_integers(int a, int b) {
    return (a - b);
}


//35
double find_average(int arr[], int size) {
    if (size == 0) {
        return 0.0; 
    }

    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }

    return (double)sum / size; 
}


//36
void number_to_string(char *buffer, size_t buffer_size, double number) {
    snprintf(buffer, buffer_size, "%lf", number);
}

//37
bool is_larger(int num1, int num2) {
    return num1 > num2;
}

//38
bool is_smaller(int num1, int num2) {
    return num1 < num2;
}

//39
int find_smaller(int num1, int num2) {
    return (num1 < num2) ? num1 : num2;
}


//40
int find_larger(int num1, int num2) {
    return (num1 > num2) ? num1 : num2;
}

//41
int sum_array(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return sum;
}

//42
double average_array(int arr[], int size) {
    if (size == 0) {
        return 0.0; 
    }

    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }

    return (double)sum / size; 
}


//43
double meters_to_feet(double meters) {
    return meters * 3.28084;
}


//44
double feet_to_meters(double feet) {
    return feet * 0.3048;
}

//45
void display_string_n_times(const char *str, int n) {
    for (int i = 0; i < n; i++) {
        printf("%s", str);
    }
    printf("\n"); 
}

//46
bool are_strings_equal(const char *str1, const char *str2) {
    return strcmp(str1, str2) == 0;
}

//47
double kilograms_to_pounds(double kilograms) {
    return kilograms * 2.20462;
}


//48
int find_index(int arr[], int size, int data) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == data) {
            return i; 
        }
    }
    return -1; 
}


//49
bool is_element_present(int arr[], int size, int data) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == data) {
            return true; 
    }
    return false; 


//50
void insert_at_index(int arr[], int size, int index, int data) {
    if (index < 0 || index > size) {
        printf("Invalid index. Element not inserted.\n");
        return;
    }

    for (int i = *size; i > index; i--) {
        arr[i] = arr[i - 1];
    }

    arr[index] = data;
    (*size)++;
}

//int remainder(int a,int b){ int c=a%b; return c;}
